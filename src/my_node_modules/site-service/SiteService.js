import merge from 'deepmerge';
import SiteAccess from './SiteAccess';

/**
 * @public
 * @class
 * @description
 * The site service class is used to create new service within a Kopaxgroup API.
 * They are mandatory to group feature (site function) within a service scope which is connected to a Kopaxgroup Backoffice
 * @param {number} id - The site service id
 * @param {object} [config={}] - The site service configuration object
 * @param {object} config.roles - The list of roles of the site function
 * @param {object} [ra={}] - react-admin configuration object
 * @param {function} ra.makeResourcesRoutes - The resources routes
 * @param {function} ra.makeCustomRoutes - The custom routes
 * @param {function} ra.makeRouteConfig - The routes configuration
 * @param {function} ra.makeCustomReducers - custom reducers
 * @example
 * new SiteService(1, { role: { AUTH: 1 } });
 */
export default class SiteService extends SiteAccess {
  constructor(id, config = {}, ra = {}) {
    super(id, config, ra);
    this.siteFunctionList = [];
  }

  /**
   * @public
   * @description
   * Add site function to the site service
   * @param {SiteFunction} siteFunction - a site function instance
   */
  addSiteFunction(siteFunction) {
    const res = this.siteFunctionList.filter((sf) => sf.id === siteFunction.id);
    if (!res.length) {
      this.siteFunctionList.push(siteFunction);
    }
  }

  /**
   * @override
   * @private
   * @description
   * It group roles from the configuration of the site service and all it's site functions
   * @returns {object} roles - object of all roles of the service
   * @example
   * userSiteService.getRoles();
   * // { AUTH: 1, ...many }
   */
  getRoles() {
    const roles = {};
    this.siteFunctionList.forEach((siteFunction) => {
      Object.assign(roles, siteFunction.getRoles());
    });
    return Object.assign({}, super.getRoles(), roles);
  }

  /**
   * @override
   * @private
   * @description
   * It group routes configuration from the configuration of the site service and all it's site functions
   * @param {object} options
   * @returns {array} routes configuration
   */
  getRoutesConfig(options) {
    const routes = super.getRoutesConfig(options);
    let siteFunctionListRoutes = [];
    this.siteFunctionList.forEach((siteFunction) => {
      siteFunctionListRoutes = siteFunctionListRoutes.concat(siteFunction.getRoutesConfig(options));
    });
    return routes.concat(siteFunctionListRoutes);
  }

  /**
   * @override
   * @private
   * @description
   * It group pages from the routes configuration of the site service and all it's site functions
   * @param {object} options
   * @returns {object} pages
   */
  getPages(options) {
    let pages = super.getPages(options);
    this.siteFunctionList.forEach((siteFunction) => {
      pages = merge(pages, siteFunction.getPages(options));
    });
    return pages;
  }

  /**
   * @override
   * @private
   * @description
   * It group resources routes from the the site service and all it's site functions
   * @param {object} options
   * @return {Array} resourceRoutes
   */
  getResourcesRoutes(options = {}) {
    const resourceRoutes = super.getResourcesRoutes(options);
    let siteFunctionResourceRoutes = [];
    this.siteFunctionList.forEach((siteFunction) => {
      siteFunctionResourceRoutes = siteFunctionResourceRoutes.concat(siteFunction.getResourcesRoutes(options));
    });
    return resourceRoutes.concat(siteFunctionResourceRoutes);
  }

  /**
   * @override
   * @private
   * @description
   * It group custom routes from the the site service and all it's site functions
   * @param {object} options
   * @return {Array} resourceRoutes
   */
  getCustomRoutes(options = {}) {
    const customRoutes = super.getCustomRoutes(options);
    let siteFunctionCustomRoutes = [];
    this.siteFunctionList.forEach((siteFunction) => {
      siteFunctionCustomRoutes = siteFunctionCustomRoutes.concat(siteFunction.getCustomRoutes(options));
    });
    return customRoutes.concat(siteFunctionCustomRoutes);
  }

  /**
   * @private
   * @description
   * Get custom reducers
   * @return {object} customReducers
   */
  getCustomReducers() {
    const customReducers = {};
    this.siteFunctionList.forEach((siteFunction) => {
      Object.assign(customReducers, siteFunction.getCustomReducers());
    });
    return Object.assign({}, super.getCustomReducers(), customReducers);
  }
}
