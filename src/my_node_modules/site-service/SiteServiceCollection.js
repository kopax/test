import merge from 'deepmerge';

/**
 * @public
 * @class
 * @description
 * It plugs all the site services together and contains useful utilities that help integrating things in your application
 *
 * @example
 * new SiteServiceCollection(userSiteService, projectSiteService); // add all project services
 * // you can use any method to feed your application
 */
export default class SiteServiceCollection extends Array {
  /**
   * @public
   * @description
   * Get roles
   * @return {object} roles - Roles object of all site access
   */
  getRoles() {
    const roles = {};
    this.forEach((siteService) => Object.assign(roles, siteService.getRoles()));
    return roles;
  }

  /**
   * @public
   * @description
   * Get routes configuration
   * @return {array} routes - The collection routes configuration
   */
  getRoutesConfig() {
    const roles = this.getRoles();
    let routes = [];
    this.forEach((siteService) => {
      routes = routes.concat(siteService.getRoutesConfig({ roles }));
    });
    return routes;
  }

  /**
   * @public
   * @description
   * Get pages object
   * @return {object} pages - The collection pages object
   */
  getPages() {
    const roles = this.getRoles();
    let pages = {};
    this.forEach((siteService) => {
      pages = merge(pages, siteService.getPages({ roles }));
    });
    return pages;
  }

  /**
   * @public
   * @description
   * Get resources routes for react-admin
   * Since Resource depend on react-admin, it must be called within Admin
   * @param {object} options
   * @param {array} options.permissions - react-admin permissions object
   * @return {array} resourceRoutes
   */
  getResourcesRoutes(options) {
    let resourceRoutes = [];
    this.forEach((siteService) => {
      resourceRoutes = resourceRoutes.concat(siteService.getResourcesRoutes(options));
    });
    return resourceRoutes;
  }

  /**
   * @public
   * @description
   * Get custom routes
   * @return {array} customRoutes
   */
  getCustomRoutes() {
    const pages = this.getPages();
    let customRoutes = [];
    this.forEach((siteService) => {
      customRoutes = customRoutes.concat(siteService.getCustomRoutes({ pages }));
    });
    return customRoutes;
  }

  /**
   * @public
   * @description
   * Get custom reducers, use it only for store needed at init.
   * If you need async reducer, use injectReducer utility
   * @return {object} customReducers
   */
  getCustomReducers() {
    const customReducers = {};
    this.forEach((siteService) => {
      Object.assign(customReducers, siteService.getCustomReducers());
    });
    return customReducers;
  }
}
