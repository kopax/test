import toPages from '@yeutech-lab/react-router-dom-utils/lib/getPages';

/**
 * @private
 * @class
 * @description
 * This abstract class is the parent class for all site access (SiteService, SiteFunction, SiteContent)
 * SiteAccess method are accessible in all of them.
 * @param {number} id - The id of the site access
 * @param {object} [config={}] - The site access configuration
 * @param {object} [ra={}] - react admin configuration
 * @param {function} ra.makeResourcesRoutes - The resources routes
 * @param {function} ra.makeCustomRoutes - The custom routes
 * @param {function} ra.makeRouteConfig - The routes configuration
 * @param {function} ra.makeCustomReducers - custom reducers
 */
export default class SiteAccess {
  constructor(id, config = {}, ra = {}) {
    if (typeof id !== 'number') {
      throw new Error('id must be a number');
    }
    this.id = id;
    this.config = config;
    this.ra = ra;
  }

  /**
   * @private
   * @description
   * It get roles within the site access configuration
   * @returns {object} roles - site access roles
   */
  getRoles() {
    return this.config.roles;
  }

  /**
   * @private
   * @description
   * Get routes configuration
   * @param {object} options
   * @return {Array} routes
   */
  getRoutesConfig(options = {}) {
    const { makeRouteConfig } = this.ra;
    if (!makeRouteConfig) {
      return [];
    }
    return makeRouteConfig(options);
  }

  /**
   * @private
   * @description
   * Get pages
   * @param {object} options
   * @returns {object} pages
   */
  getPages(options = {}) {
    return toPages(this.getRoutesConfig(options));
  }

  /**
   * @private
   * @description
   * Get resources routes
   * @param {object} options
   * @return {Array} resourceRoutes
   */
  getResourcesRoutes(options = {}) {
    const { makeResourcesRoutes } = this.ra;
    if (!makeResourcesRoutes) {
      return [];
    }
    return makeResourcesRoutes(options);
  }

  /**
   * @private
   * @description
   * Get custom routes
   * @param {object} options
   * @return {Array} resourceRoutes
   */
  getCustomRoutes(options = {}) {
    const { makeCustomRoutes } = this.ra;
    if (!makeCustomRoutes) {
      return [];
    }
    return makeCustomRoutes(options);
  }

  /**
   * @private
   * @description
   * Get custom reducers
   * @return {object} customReducers
   */
  getCustomReducers(options = {}) {
    const { makeCustomReducers } = this.ra;
    if (!makeCustomReducers) {
      return {};
    }
    return makeCustomReducers(options);
  }
}
